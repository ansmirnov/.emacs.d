
#+TITLE: Emacs Config
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:https://www.linux.org.ru/tango/combined.css
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

* README

This is my emacs configuration.

To install and try this:

1.  Remove or rename `~/.emacs.d` directory.

2.  Clone this repo in `~/.emacs.d`:

#+BEGIN_SRC 
git clone https://github.com/ansmirnov/.emacs.d.git ~/.emacs.d
#+END_SRC    
    
3. Enjoy.


* Personal information

#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Andrey Smirnov"
      user-mail-address "mail@ansmirnov.ru")
#+END_SRC
  

* Global configuration

** Package system initialization

Add package archives:

#+begin_src emacs-lisp :tangle yes
  (require 'package)

  (setq package-archives '(
      ("gnu" . "https://elpa.gnu.org/packages/")
      ("melpa" . "https://melpa.org/packages/")
  ))

  (package-initialize)

  ;;(package-refresh-contents)
#+end_src

Install =use-package= if it not installed.

#+begin_src emacs-lisp :tangle yes
  (defun package-install-if-not (package)
    "Install PACKAGE if it's not installed yet."
    (unless (package-installed-p package)
    (package-refresh-contents)
    (package-install package)))

  (package-install-if-not 'use-package)

  (setq package-enable-at-startup nil)

  (eval-when-compile
    (require 'use-package))
  (put 'use-package 'lisp-indent-function 1)
  (setq use-package-always-ensure t)
#+end_src


** Configuration settings

#+BEGIN_SRC emacs-lisp :tangle yes
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC


** Better defaults

Better defaults package breaks Ivy. I try to copy it code in my emacs config.

#+BEGIN_SRC emacs-lisp :tangle yes
(progn
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  (require 'saveplace)
  (setq-default save-place t)

  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-z") 'zap-up-to-char)

  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)

  (show-paren-mode 1)
  (setq-default indent-tabs-mode nil)
  (setq save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        visible-bell t
        load-prefer-newer t
        ediff-window-setup-function 'ediff-setup-windows-plain
        save-place-file (concat user-emacs-directory "places")
        backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups")))))

#+END_SRC


** Key bindings

#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key [f2] 'save-buffer)
  (global-set-key [f3] 'find-file)
  (global-set-key [pause] 'kill-buffer-and-window) 
  (global-set-key [f12] 'shell) 
#+end_src


** Printing

I use emacs for printing.

This settings makes imprints beautiful.

#+begin_src emacs-lisp :tangle yes
  (setq lpr-switches '("-o cpi=11" "-o page-left=54"))
#+end_src


** Translate text using Google Translate

Use Google Translate for translate text from region.

#+begin_src emacs-lisp :tangle yes
  (use-package google-translate
    :defer t
    :commands 
    (google-translate-query-translate-reverse
            google-translate-query-translate
            google-translate-at-point
            google-translate-at-point-reverse)
         :init
           (setq google-translate-default-source-language "en")
           (setq google-translate-default-target-language "ru")
         :bind
           ("C-c t" . google-translate-at-point)
           ("C-c T" . google-translate-query-translate)
       )
   #+end_src


** Auto completion

#+begin_src emacs-lisp :tangle yes
  (use-package ivy
    :diminish ivy-mode
    :init
      ;; (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
      (ivy-mode t)
      (setq ivy-count-format "%d/%d ")
    :bind
      (("C-c C-r" . ivy-resume)))
#+end_src

Company mode for auto completion in any buffer.

#+begin_src emacs-lisp :tangle yes
  (use-package company
    :diminish company-mode
    :hook
    (after-init . global-company-mode))
#+end_src


** Projects

#+BEGIN_SRC emacs-lisp :tangle yes
;(use-package projectile
;  :config
;  (projectile-global-mode)
;  (setq projectile-enable-caching t)
;)
#+END_SRC


** Change "yes or no" to "y or n"

#+BEGIN_SRC emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC


** Russian keyboard

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package reverse-im
  :config
  (reverse-im-activate "russian-computer"))
#+END_SRC


* Theme and appearance

** Themes

I use different themes on some devices.

#+begin_src emacs-lisp :tangle yes
  (use-package zenburn-theme)
  (use-package material-theme)
;;  (load-theme 'zenburn t)
#+end_src

** Fonts

I use Anonymous Pro font. Font size is 14.

#+begin_src emacs-lisp :tangle yes
  (add-to-list 'default-frame-alist '(font . "Anonymous Pro-14" ))
  (set-face-attribute 'default t :font "Anonymous Pro-14" )
#+end_src

** Window

Disable menubar, toolbar. scrolls bar.

#+begin_src emacs-lisp :tangle yes
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))
#+end_src

Full screen.

#+BEGIN_SRC emacs-lisp :tangle yes
  (toggle-frame-fullscreen)
#+END_SRC

** Statusbar

Display time and mail flag.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq display-time-24hr-format t)
(display-time)
#+END_SRC

Display laptop battery status.

#+BEGIN_SRC emacs-lisp :tangle yes
(display-battery-mode t)
#+END_SRC

Powerline

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package powerline
:config
(powerline-default-theme)
)

#+END_SRC

Lines below are draft.

;;  #+begin_src emacs-lisp :tangle yes
;;    (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-13" ))
;;    (set-face-attribute 'default t :font "DejaVu Sans Mono-13" )
;;  #+end_src



* Programming

** Common tools

Code for backlighting of pairwise brackets.

Electric pair mode will automatically add closing brackets.

#+begin_src emacs-lisp :tangle yes
  (show-paren-mode t) 
  (electric-pair-mode t)
#+end_src

Magit install.

#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :bind 
  ("M-m" . magit) )
#+end_src

SSH install.

#+begin_src emacs-lisp :tangle yes
  (use-package ssh)
#+end_src

Flycheck install.

#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :ensure t
  :init
  (add-hook 'after-init-hook 'global-flycheck-mode)
)
#+end_src



** LSP

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-mode)
(use-package lsp-ui
:hook
    (lsp-mode . lsp-ui-mode)
)
#+END_SRC


** Python

Add anaconda venv.

#+BEGIN_SRC emacs-lisp :tangle yes
(setenv "PATH" (concat (getenv "PATH") "~/anaconda3/bin/"))
(setq exec-path (append exec-path '("~/anaconda3/bin/")))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package python-mode)

(use-package elpy)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-python
:hook
    (python-mode . lsp-python-enable)
:config
    (setq lsp-response-timeout 60)
)
#+END_SRC

For connecting to ipython notebooks server.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ein)
#+END_SRC


** PHP

#+begin_src emacs-lisp :tangle yes
  (use-package php-mode)
#+end_src


* Documentation

Add markdown support.

#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
      ("\\.md\\'" . markdown-mode)
      ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src


* Org mode

** Setup org files

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-directory "~/as")
(setq org-default-notes-file (concat org-directory "/inbox.org"))
#+END_SRC

** Refile

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-refile-use-outline-path t)
(setq org-refile-targets
      '((org-agenda-files . (:maxlevel . 4))))
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

** Global key bindings

#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

** Org babel

To fast adding code blocks in emacs config.

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'org-structure-template-alist
  (list "el" "#+BEGIN_SRC emacs-lisp :tangle yes\n?\n#+END_SRC" "<src lang=\"?\">\n\n</src>")
  )
#+END_SRC

IPython support.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq ob-ipython-command "~/anaconda3/bin/jupyter") 

(use-package ob-ipython)

(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (ipython . t)
   (sh . t)
))
#+END_SRC

** GTD Settings

TODO keywords

#+BEGIN_SRC emacs-lisp :tangle yes
(setq org-todo-keywords '((sequence "TODO" "REVIEW" "DONE")))
#+END_SRC





* EXWM

** EXWM packages and settings

Require packages.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package exwm)
#+END_SRC

Config. Copied from default  

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'exwm-config)

(defun my/exwm-config ()
  "Default configuration of EXWM."
  ;; Set the initial workspace number.
  (setq exwm-workspace-number 4)
  ;; Make class name the buffer name
  (add-hook 'exwm-update-class-hook
            (lambda ()
              (exwm-workspace-rename-buffer exwm-class-name)))
  ;; 's-r': Reset
  (exwm-input-set-key (kbd "s-r") #'exwm-reset)
  ;; 's-w': Switch workspace
  (exwm-input-set-key (kbd "s-w") #'exwm-workspace-switch)
  ;; 's-N': Switch to certain workspace
  (dotimes (i 10)
    (exwm-input-set-key (kbd (format "s-%d" i))
                        `(lambda ()
                           (interactive)
                           (exwm-workspace-switch-create ,i))))
  ;; 's-&': Launch application
  (exwm-input-set-key (kbd "s-&")
                      (lambda (command)
                        (interactive (list (read-shell-command "$ ")))
                        (start-process-shell-command command nil command)))
  ;; Line-editing shortcuts
  (setq exwm-input-simulation-keys
        '(([?\C-b] . [left])
          ([?\C-f] . [right])
          ([?\C-p] . [up])
          ([?\C-n] . [down])
          ([?\C-a] . [home])
          ([?\C-e] . [end])
          ([?\M-v] . [prior])
          ([?\C-v] . [next])
          ([?\C-d] . [delete])
          ([?\C-k] . [S-end delete])))
  ;; Enable EXWM
  (exwm-enable)
  ;; Configure Ido
 ;; (exwm-config-ido)
  ;; Other configurations
  (exwm-config-misc))

(defun exwm-rename-buffer ()
  (interactive)
  (exwm-workspace-rename-buffer
   (concat exwm-class-name ":"
           (if (<= (length exwm-title) 50) exwm-title
             (concat (substring exwm-title 0 49) "...")))))

;; Add these hooks in a suitable place (e.g., as done in exwm-config-default)
(add-hook 'exwm-update-class-hook 'exwm-rename-buffer)
(add-hook 'exwm-update-title-hook 'exwm-rename-buffer)

#+END_SRC

Apply settings.

#+BEGIN_SRC emacs-lisp :tangle yes
(my/exwm-config)
#+END_SRC


** XOrg configuration


#+BEGIN_SRC sh :tangle test
test
#+END_SRC

* Email

#+BEGIN_SRC emacs-lisp :tangle yes
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
(require 'mu4e)
(setq
  mu4e-maildir       "~/ASMail"   ;; top-level Maildir
  mu4e-sent-folder   "/Sent"       ;; folder for sent messages
  mu4e-drafts-folder "/Drafts"     ;; unfinished messages
  mu4e-trash-folder  "/Trash"      ;; trashed messages
  mu4e-refile-folder "/Archive")   ;; saved messages

(setq mu4e-get-mail-command "offlineimap")

(require 'smtpmail)

(setq message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-starttls-credentials
      '(("smtp.yandex.ru" 465 nil nil))
      smtpmail-auth-credentials "~/authinfo"
      smtpmail-default-smtp-server "smtp.yandex.ru"
      smtpmail-smtp-server "smtp.yandex.ru"
      smtpmail-stream-type  'ssl
      smtpmail-smtp-service 465
      smtpmail-debug-info t
      smptmail-debug-verp t
)

#+END_SRC

